{
  "Name": "ORTHANC_PROD_AE",
  "DicomAet": "ORTHANC_PROD_AE",
  "DicomPort": 4242,
  "HttpPort": 8042,
  
  "RemoteAccessAllowed": true,
  "AuthenticationEnabled": true,
  "RegisteredUsers": {
    "orthanc": "orthanc_secure_2024"
  },
  
  "DicomModalities": {
    "PACS_PRIMARY": {
      "AET": "PACS_PRIMARY",
      "Host": "pacs.hospital.local",
      "Port": 104,
      "UseDicomTls": true,
      "LocalAet": "ORTHANC_PROD_AE",
      "Timeout": 30,
      "AllowEcho": true,
      "AllowFind": true,
      "AllowMove": true,
      "AllowGet": true,
      "AllowStore": true
    },
    "WORKSTATION_AW": {
      "AET": "AW_WORKSTATION",
      "Host": "aw.radiology.local",
      "Port": 104,
      "UseDicomTls": true,
      "LocalAet": "ORTHANC_PROD_AE",
      "Timeout": 30,
      "AllowEcho": true,
      "AllowFind": true,
      "AllowMove": false,
      "AllowGet": true,
      "AllowStore": false
    }
  },
  
  "OrthancPeers": {},
  
  "HttpVerbose": false,
  "DicomVerbose": false,
  
  "StorageDirectory": "/var/lib/orthanc/storage",
  "IndexDirectory": "/var/lib/orthanc/db",
  
  "StorageCompression": false,
  "MaximumStorageSize": 0,
  "MaximumPatientCount": 0,
  
  "DicomAssociationCloseDelay": 5,
  "DicomScuTimeout": 30,
  "DicomScpTimeout": 60,
  
  "HttpTimeout": 60,
  "HttpRequestTimeout": 30,
  
  "UnknownSopClassAccepted": false,
  "DicomCheckModalityHost": false,
  
  "DicomAlwaysAllowEcho": true,
  "DicomAlwaysAllowFind": false,
  "DicomAlwaysAllowMove": false,
  "DicomAlwaysAllowGet": false,
  "DicomAlwaysAllowStore": true,
  
  "DicomCheckCalledAet": true,
  "DicomCheckCallingAet": true,
  
  "ExecuteLuaEnabled": true,
  "HttpsVerifyPeers": true,
  "HttpsCACertificates": "/etc/orthanc/certs/ca-chain.crt",
  
  "UserMetadata": {},
  "DefaultEncoding": "Latin1",
  "DeidentifyLogs": true,
  "DeidentifyLogsDicomVersion": "2023b",
  
  "LoadPrivateDictionary": true,
  "Dictionary": {},
  
  "SynchronousCMove": true,
  "JobsHistorySize": 10,
  "SaveJobs": true,
  
  "OverwriteInstances": false,
  "MediaArchiveSize": 1,
  
  "StoreMD5ForAttachments": true,
  
  "LimitFindResults": 0,
  "LimitFindInstances": 0,
  
  "LogExportedResources": false,
  "KeepAlive": true,
  "TcpNoDelay": true,
  
  "HttpThreadsCount": 50,
  "HttpDescribeErrors": true,
  
  "DicomTlsEnabled": true,
  "DicomTlsCertificate": "/etc/orthanc/certs/dicom-tls.crt",
  "DicomTlsPrivateKey": "/etc/orthanc/certs/dicom-tls.key",
  "DicomTlsTrustedCertificates": "/etc/orthanc/certs/dicom-ca-chain.crt",
  "DicomTlsRemoteCertificateRequired": true,
  "DicomTlsCiphersAccepted": [
    "ECDHE-RSA-AES256-GCM-SHA384",
    "ECDHE-RSA-AES128-GCM-SHA256",
    "ECDHE-RSA-AES256-SHA384",
    "ECDHE-RSA-AES128-SHA256",
    "DHE-RSA-AES256-GCM-SHA384",
    "DHE-RSA-AES128-GCM-SHA256"
  ],
  
  "HttpsCertificate": "/etc/orthanc/certs/orthanc-https.crt",
  "HttpsPrivateKey": "/etc/orthanc/certs/orthanc-https.key",
  
  "Plugins": [],
  
  "OnStoredInstance": [
    "function OnStoredInstance(instanceId, tags, metadata, origin)",
    "  -- Enhanced webhook with HMAC-SHA256 signature",
    "  local webhook_url = 'https://bridge.local/api/orthanc/new-instance'",
    "  local webhook_secret = os.getenv('WEBHOOK_SECRET') or 'webhook_secret_2024_change_in_prod'",
    "  ",
    "  -- Prepare payload with instance metadata",
    "  local payload = {}",
    "  payload['instanceId'] = instanceId",
    "  payload['studyInstanceUID'] = tags['StudyInstanceUID']",
    "  payload['seriesInstanceUID'] = tags['SeriesInstanceUID']",
    "  payload['sopInstanceUID'] = tags['SOPInstanceUID']",
    "  payload['patientID'] = tags['PatientID']",
    "  payload['patientName'] = tags['PatientName']",
    "  payload['modality'] = tags['Modality']",
    "  payload['studyDate'] = tags['StudyDate']",
    "  payload['origin'] = origin",
    "  payload['timestamp'] = os.time()",
    "  payload['nonce'] = GenerateUuid()",
    "  ",
    "  -- Convert to JSON",
    "  local json_payload = DumpJson(payload)",
    "  ",
    "  -- Calculate HMAC-SHA256 signature",
    "  local signature_data = json_payload .. payload['timestamp'] .. payload['nonce']",
    "  local signature = ComputeSHA256(signature_data .. webhook_secret)",
    "  ",
    "  -- Send webhook with enhanced security",
    "  local headers = {}",
    "  headers['Content-Type'] = 'application/json'",
    "  headers['X-Orthanc-Signature'] = 'sha256=' .. signature",
    "  headers['X-Orthanc-Timestamp'] = tostring(payload['timestamp'])",
    "  headers['X-Orthanc-Nonce'] = payload['nonce']",
    "  headers['X-Orthanc-Instance-Id'] = instanceId",
    "  headers['User-Agent'] = 'Orthanc-Bridge/1.0'",
    "  ",
    "  -- Use HTTPS with certificate verification",
    "  local success, response = pcall(function()",
    "    return HttpPost(webhook_url, json_payload, headers)",
    "  end)",
    "  ",
    "  if not success then",
    "    print('Webhook failed for instance: ' .. instanceId .. ' - ' .. tostring(response))",
    "  else",
    "    print('Webhook sent for instance: ' .. instanceId)",
    "  end",
    "end"
  ],
  
  "OnChange": [],
  "OnDeletedPatient": [],
  "OnDeletedStudy": [],
  "OnDeletedSeries": [],
  "OnDeletedInstance": [],
  "OnStablePatient": [],
  "OnStableStudy": [],
  "OnStableSeries": [],
  
  "IncomingHttpRequestFilter": [],
  "OutgoingHttpRequestFilter": [],
  
  "ReceivedInstanceFilter": [
    "function ReceivedInstanceFilter(dicom, origin, info)",
    "  -- Log incoming DICOM instances for audit trail",
    "  local study_uid = dicom.StudyInstanceUID",
    "  local series_uid = dicom.SeriesInstanceUID", 
    "  local instance_uid = dicom.SOPInstanceUID",
    "  local calling_aet = info.CallingAet or 'UNKNOWN'",
    "  local called_aet = info.CalledAet or 'UNKNOWN'",
    "  local remote_ip = info.RemoteIp or 'UNKNOWN'",
    "  ",
    "  -- Audit log entry",
    "  print('AUDIT: DICOM_RECEIVED - Study=' .. study_uid .. ' Series=' .. series_uid .. ' Instance=' .. instance_uid .. ' From=' .. calling_aet .. '@' .. remote_ip .. ' To=' .. called_aet)",
    "  ",
    "  -- Allow all instances (non-destructive)",
    "  return dicom",
    "end"
  ],
  
  "IncomingFindRequestFilter": [
    "function IncomingFindRequestFilter(dicom, origin, info)",
    "  -- Log C-FIND requests for audit trail",
    "  local calling_aet = info.CallingAet or 'UNKNOWN'",
    "  local remote_ip = info.RemoteIp or 'UNKNOWN'",
    "  print('AUDIT: DICOM_FIND - From=' .. calling_aet .. '@' .. remote_ip)",
    "  return dicom",
    "end"
  ],
  
  "IncomingMoveRequestFilter": [
    "function IncomingMoveRequestFilter(dicom, origin, info)",
    "  -- Log C-MOVE requests for audit trail",
    "  local calling_aet = info.CallingAet or 'UNKNOWN'",
    "  local remote_ip = info.RemoteIp or 'UNKNOWN'",
    "  print('AUDIT: DICOM_MOVE - From=' .. calling_aet .. '@' .. remote_ip)",
    "  return dicom",
    "end"
  ],
  
  "IncomingCStoreRequestFilter": [
    "function IncomingCStoreRequestFilter(dicom, origin, info)",
    "  -- Log C-STORE requests for audit trail",
    "  local calling_aet = info.CallingAet or 'UNKNOWN'",
    "  local remote_ip = info.RemoteIp or 'UNKNOWN'",
    "  print('AUDIT: DICOM_STORE - From=' .. calling_aet .. '@' .. remote_ip)",
    "  return dicom",
    "end"
  ],
  
  "WorklistCallback": []
}