const FollowUp = require('../models/FollowUp');
const followUpAutomation = require('../services/followup-automation');

// Create manual follow-up
exports.createFollowUp = async (req, res) => {
  try {
    const followUp = new FollowUp({
      ...req.body,
      createdBy: req.user._id,
      autoGenerated: false
    });

    await followUp.save();
    await followUp.populate('patientId studyId createdBy');

    res.status(201).json({
      success: true,
      data: followUp
    });
  } catch (error) {
    console.error('Error creating follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create follow-up',
      error: error.message
    });
  }
};

// Generate automatic follow-up from report
exports.generateFromReport = async (req, res) => {
  try {
    const { reportId } = req.params;
    
    const followUp = await followUpAutomation.createAutomaticFollowUp(
      reportId,
      req.user._id
    );

    if (!followUp) {
      return res.status(200).json({
        success: true,
        message: 'No follow-up recommendations generated',
        data: null
      });
    }

    await followUp.populate('patientId studyId reportId');

    res.status(201).json({
      success: true,
      message: 'Follow-up automatically generated',
      data: followUp
    });
  } catch (error) {
    console.error('Error generating follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate follow-up',
      error: error.message
    });
  }
};

// Get follow-up recommendations for a report
exports.getRecommendations = async (req, res) => {
  try {
    const { reportId } = req.params;
    
    const recommendations = await followUpAutomation.analyzeReport(
      reportId,
      req.user._id
    );

    res.json({
      success: true,
      data: recommendations
    });
  } catch (error) {
    console.error('Error getting recommendations:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get recommendations',
      error: error.message
    });
  }
};

// Get all follow-ups with filters
exports.getFollowUps = async (req, res) => {
  try {
    const {
      status,
      patientId,
      type,
      priority,
      startDate,
      endDate,
      page = 1,
      limit = 20
    } = req.query;

    const query = {};

    // Apply filters
    if (status) query.status = status;
    if (patientId) query.patientId = patientId;
    if (type) query.type = type;
    if (priority) query.priority = parseInt(priority);
    
    if (startDate || endDate) {
      query.recommendedDate = {};
      if (startDate) query.recommendedDate.$gte = new Date(startDate);
      if (endDate) query.recommendedDate.$lte = new Date(endDate);
    }

    // Hospital filtering for non-super-admins
    if (req.user.role !== 'super_admin' && req.user.hospitalId) {
      query['metadata.hospitalId'] = req.user.hospitalId;
    }

    const skip = (page - 1) * limit;

    const [followUps, total] = await Promise.all([
      FollowUp.find(query)
        .populate('patientId', 'firstName lastName mrn dateOfBirth')
        .populate('studyId', 'studyDate modality bodyPart')
        .populate('createdBy', 'firstName lastName')
        .populate('assignedTo', 'firstName lastName')
        .sort({ recommendedDate: 1 })
        .skip(skip)
        .limit(parseInt(limit)),
      FollowUp.countDocuments(query)
    ]);

    res.json({
      success: true,
      data: followUps,
      pagination: {
        total,
        page: parseInt(page),
        pages: Math.ceil(total / limit),
        limit: parseInt(limit)
      }
    });
  } catch (error) {
    console.error('Error getting follow-ups:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get follow-ups',
      error: error.message
    });
  }
};

// Get single follow-up
exports.getFollowUp = async (req, res) => {
  try {
    const followUp = await FollowUp.findById(req.params.id)
      .populate('patientId')
      .populate('studyId')
      .populate('reportId')
      .populate('createdBy', 'firstName lastName')
      .populate('assignedTo', 'firstName lastName')
      .populate('notes.createdBy', 'firstName lastName');

    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    res.json({
      success: true,
      data: followUp
    });
  } catch (error) {
    console.error('Error getting follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get follow-up',
      error: error.message
    });
  }
};

// Update follow-up
exports.updateFollowUp = async (req, res) => {
  try {
    const followUp = await FollowUp.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true, runValidators: true }
    ).populate('patientId studyId assignedTo');

    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    res.json({
      success: true,
      data: followUp
    });
  } catch (error) {
    console.error('Error updating follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to update follow-up',
      error: error.message
    });
  }
};

// Schedule follow-up
exports.scheduleFollowUp = async (req, res) => {
  try {
    const { scheduledDate } = req.body;
    
    const followUp = await FollowUp.findById(req.params.id);
    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    await followUp.schedule(new Date(scheduledDate), req.user._id);
    await followUp.populate('patientId studyId');

    res.json({
      success: true,
      message: 'Follow-up scheduled successfully',
      data: followUp
    });
  } catch (error) {
    console.error('Error scheduling follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to schedule follow-up',
      error: error.message
    });
  }
};

// Mark follow-up as completed
exports.completeFollowUp = async (req, res) => {
  try {
    const followUp = await FollowUp.findById(req.params.id);
    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    await followUp.markCompleted(req.user._id);
    await followUp.populate('patientId studyId');

    res.json({
      success: true,
      message: 'Follow-up marked as completed',
      data: followUp
    });
  } catch (error) {
    console.error('Error completing follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to complete follow-up',
      error: error.message
    });
  }
};

// Add note to follow-up
exports.addNote = async (req, res) => {
  try {
    const { text } = req.body;
    
    const followUp = await FollowUp.findById(req.params.id);
    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    followUp.notes.push({
      text,
      createdBy: req.user._id,
      createdAt: new Date()
    });

    await followUp.save();
    await followUp.populate('notes.createdBy', 'firstName lastName');

    res.json({
      success: true,
      data: followUp
    });
  } catch (error) {
    console.error('Error adding note:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to add note',
      error: error.message
    });
  }
};

// Get overdue follow-ups
exports.getOverdue = async (req, res) => {
  try {
    const query = {
      status: { $in: ['pending', 'scheduled'] },
      recommendedDate: { $lt: new Date() }
    };

    // Hospital filtering
    if (req.user.role !== 'super_admin' && req.user.hospitalId) {
      query['metadata.hospitalId'] = req.user.hospitalId;
    }

    const followUps = await FollowUp.find(query)
      .populate('patientId', 'firstName lastName mrn')
      .populate('studyId', 'studyDate modality')
      .sort({ recommendedDate: 1 });

    res.json({
      success: true,
      data: followUps,
      count: followUps.length
    });
  } catch (error) {
    console.error('Error getting overdue follow-ups:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get overdue follow-ups',
      error: error.message
    });
  }
};

// Get upcoming follow-ups
exports.getUpcoming = async (req, res) => {
  try {
    const { days = 7 } = req.query;
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + parseInt(days));

    const query = {
      status: { $in: ['pending', 'scheduled'] },
      recommendedDate: {
        $gte: new Date(),
        $lte: endDate
      }
    };

    // Hospital filtering
    if (req.user.role !== 'super_admin' && req.user.hospitalId) {
      query['metadata.hospitalId'] = req.user.hospitalId;
    }

    const followUps = await FollowUp.find(query)
      .populate('patientId', 'firstName lastName mrn')
      .populate('studyId', 'studyDate modality')
      .sort({ recommendedDate: 1 });

    res.json({
      success: true,
      data: followUps,
      count: followUps.length
    });
  } catch (error) {
    console.error('Error getting upcoming follow-ups:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get upcoming follow-ups',
      error: error.message
    });
  }
};

// Get follow-up statistics
exports.getStatistics = async (req, res) => {
  try {
    const hospitalId = req.user.role === 'super_admin' 
      ? req.query.hospitalId 
      : req.user.hospitalId;

    const stats = await followUpAutomation.getStatistics(hospitalId);

    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Error getting statistics:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get statistics',
      error: error.message
    });
  }
};

// Delete follow-up
exports.deleteFollowUp = async (req, res) => {
  try {
    const followUp = await FollowUp.findByIdAndDelete(req.params.id);

    if (!followUp) {
      return res.status(404).json({
        success: false,
        message: 'Follow-up not found'
      });
    }

    res.json({
      success: true,
      message: 'Follow-up deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting follow-up:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to delete follow-up',
      error: error.message
    });
  }
};
