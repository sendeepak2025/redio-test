const mongoose = require('mongoose');

const followUpSchema = new mongoose.Schema({
  patientId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Patient',
    required: true,
    index: true
  },
  studyId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Study',
    required: true
  },
  reportId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'StructuredReport'
  },
  
  // Follow-up Details
  type: {
    type: String,
    enum: ['routine', 'urgent', 'critical', 'recommended', 'optional'],
    required: true,
    default: 'routine'
  },
  priority: {
    type: Number,
    min: 1,
    max: 5,
    default: 3
  },
  
  // Scheduling
  recommendedDate: {
    type: Date,
    required: true,
    index: true
  },
  scheduledDate: Date,
  completedDate: Date,
  
  // Clinical Information
  reason: {
    type: String,
    required: true
  },
  findings: [String],
  recommendations: [String],
  modality: String,
  bodyPart: String,
  
  // Status Tracking
  status: {
    type: String,
    enum: ['pending', 'scheduled', 'completed', 'overdue', 'cancelled'],
    default: 'pending',
    index: true
  },
  
  // Automation
  autoGenerated: {
    type: Boolean,
    default: false
  },
  aiConfidence: Number,
  triggerFindings: [String],
  
  // Notifications
  notifications: [{
    type: {
      type: String,
      enum: ['email', 'sms', 'system']
    },
    sentAt: Date,
    status: String
  }],
  
  // Assignment
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Notes
  notes: [{
    text: String,
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    createdAt: {
      type: Date,
      default: Date.now
    }
  }],
  
  // Metadata
  metadata: {
    originalStudyDate: Date,
    hospitalId: String,
    departmentId: String
  }
}, {
  timestamps: true
});

// Indexes for performance
followUpSchema.index({ status: 1, recommendedDate: 1 });
followUpSchema.index({ patientId: 1, status: 1 });
followUpSchema.index({ createdAt: -1 });

// Virtual for overdue status
followUpSchema.virtual('isOverdue').get(function() {
  if (this.status === 'completed' || this.status === 'cancelled') {
    return false;
  }
  return new Date() > this.recommendedDate;
});

// Method to mark as completed
followUpSchema.methods.markCompleted = function(userId) {
  this.status = 'completed';
  this.completedDate = new Date();
  return this.save();
};

// Method to schedule
followUpSchema.methods.schedule = function(date, userId) {
  this.scheduledDate = date;
  this.status = 'scheduled';
  return this.save();
};

// Static method to find overdue follow-ups
followUpSchema.statics.findOverdue = function() {
  return this.find({
    status: { $in: ['pending', 'scheduled'] },
    recommendedDate: { $lt: new Date() }
  }).populate('patientId studyId');
};

// Static method to find upcoming follow-ups
followUpSchema.statics.findUpcoming = function(days = 7) {
  const endDate = new Date();
  endDate.setDate(endDate.getDate() + days);
  
  return this.find({
    status: { $in: ['pending', 'scheduled'] },
    recommendedDate: { 
      $gte: new Date(),
      $lte: endDate
    }
  }).populate('patientId studyId');
};

module.exports = mongoose.model('FollowUp', followUpSchema);
