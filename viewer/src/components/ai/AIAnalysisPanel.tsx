import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Paper,
  Chip,
  CircularProgress,
  Alert,
  Button,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  List,
  ListItem,
  ListItemText,
  LinearProgress,
  Tooltip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material'
import {
  ExpandMore as ExpandMoreIcon,
  Psychology as AIIcon,
  Warning as WarningIcon,
  CheckCircle as CheckIcon,
  Refresh as RefreshIcon,
  Info as InfoIcon,
  ContentCopy as CopyIcon,
  Download as DownloadIcon,
} from '@mui/icons-material'
import medicalAIService, { AIAnalysisResult } from '../../services/medicalAIService'

interface AIAnalysisPanelProps {
  studyInstanceUID: string
  frameIndex: number
  patientContext?: {
    age?: number
    sex?: string
    clinicalHistory?: string
    indication?: string
  }
  onReportGenerated?: (report: string) => void
}

export const AIAnalysisPanel: React.FC<AIAnalysisPanelProps> = ({
  studyInstanceUID,
  frameIndex,
  patientContext,
  onReportGenerated
}) => {
  const [analysis, setAnalysis] = useState<AIAnalysisResult | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [showDisclaimerDialog, setShowDisclaimerDialog] = useState(false)
  const [hasAcceptedDisclaimer, setHasAcceptedDisclaimer] = useState(false)

  // Load existing analysis on mount
  useEffect(() => {
    loadExistingAnalysis()
  }, [studyInstanceUID])

  const loadExistingAnalysis = async () => {
    try {
      const existingAnalysis = await medicalAIService.getStudyAnalysis(studyInstanceUID)
      if (existingAnalysis) {
        setAnalysis(existingAnalysis)
      }
    } catch (err) {
      console.error('Failed to load existing analysis:', err)
    }
  }

  const performAnalysis = async () => {
    if (!hasAcceptedDisclaimer) {
      setShowDisclaimerDialog(true)
      return
    }

    setLoading(true)
    setError(null)

    try {
      const result = await medicalAIService.analyzeStudy(
        studyInstanceUID,
        frameIndex,
        patientContext
      )
      setAnalysis(result)

      // Notify parent if report was generated
      if (result.analyses.report && onReportGenerated) {
        const reportText = formatReportForExport(result.analyses.report)
        onReportGenerated(reportText)
      }
    } catch (err: any) {
      console.error('AI analysis failed:', err)
      setError(err.response?.data?.message || 'AI analysis failed. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const formatReportForExport = (report: any): string => {
    return `
FINDINGS:
${report.findings}

IMPRESSION:
${report.impression}

RECOMMENDATIONS:
${report.recommendations}

KEY FINDINGS:
${report.keyFindings.map((f: string) => `‚Ä¢ ${f}`).join('\n')}

${report.criticalFindings.length > 0 ? `
CRITICAL FINDINGS:
${report.criticalFindings.map((f: string) => `‚Ä¢ ${f}`).join('\n')}
` : ''}

---
Generated by ${report.model} on ${new Date(report.generatedAt).toLocaleString()}
‚ö†Ô∏è This AI-generated report requires radiologist review and approval.
    `.trim()
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const handleAcceptDisclaimer = () => {
    setHasAcceptedDisclaimer(true)
    setShowDisclaimerDialog(false)
    performAnalysis()
  }

  if (loading) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <CircularProgress size={40} />
        <Typography variant="body2" sx={{ mt: 2 }}>
          Analyzing with AI models...
        </Typography>
        <Typography variant="caption" color="text.secondary">
          This may take 10-30 seconds
        </Typography>
      </Box>
    )
  }

  if (error) {
    return (
      <Box sx={{ p: 2 }}>
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
        <Button
          variant="outlined"
          startIcon={<RefreshIcon />}
          onClick={performAnalysis}
          fullWidth
        >
          Retry Analysis
        </Button>
      </Box>
    )
  }

  if (!analysis) {
    return (
      <Box sx={{ p: 2 }}>
        <Alert severity="info" icon={<AIIcon />} sx={{ mb: 2 }}>
          AI analysis not yet performed for this study.
        </Alert>
        <Button
          variant="contained"
          startIcon={<AIIcon />}
          onClick={performAnalysis}
          fullWidth
          color="primary"
        >
          Analyze with AI
        </Button>
        <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
          Uses MedSigLIP and MedGemma for automated analysis
        </Typography>
      </Box>
    )
  }

  return (
    <Box sx={{ p: 2 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <AIIcon color="primary" />
          <Typography variant="h6">AI Analysis</Typography>
        </Box>
        <Tooltip title="Refresh Analysis">
          <IconButton size="small" onClick={performAnalysis}>
            <RefreshIcon />
          </IconButton>
        </Tooltip>
      </Box>

      {/* Warning Banner */}
      <Alert severity="warning" icon={<WarningIcon />} sx={{ mb: 2 }}>
        <Typography variant="body2" fontWeight="bold">
          Requires Radiologist Review
        </Typography>
        <Typography variant="caption">
          AI-generated results are not FDA-approved for clinical diagnosis
        </Typography>
      </Alert>

      {/* Classification Results */}
      {analysis.analyses.classification && (
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1" fontWeight="bold">
              üîç Image Classification
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box>
              <Chip
                label={analysis.analyses.classification.classification}
                color="primary"
                sx={{ mb: 1 }}
              />
              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" color="text.secondary">
                  Confidence
                </Typography>
                <LinearProgress
                  variant="determinate"
                  value={analysis.analyses.classification.confidence * 100}
                  sx={{ height: 8, borderRadius: 1, mt: 0.5 }}
                />
                <Typography variant="caption" color="text.secondary">
                  {(analysis.analyses.classification.confidence * 100).toFixed(1)}%
                </Typography>
              </Box>

              {analysis.analyses.classification.topPredictions.length > 0 && (
                <>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 1, display: 'block' }}>
                    Top Predictions:
                  </Typography>
                  <List dense>
                    {analysis.analyses.classification.topPredictions.map((pred, idx) => (
                      <ListItem key={idx} sx={{ py: 0.5 }}>
                        <ListItemText
                          primary={pred.label}
                          secondary={`${(pred.confidence * 100).toFixed(1)}%`}
                        />
                      </ListItem>
                    ))}
                  </List>
                </>
              )}

              <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                Model: {analysis.analyses.classification.model} ‚Ä¢ 
                Processing: {analysis.analyses.classification.processingTime}ms
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      )}

      {/* Generated Report */}
      {analysis.analyses.report && (
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1" fontWeight="bold">
              üìù AI-Generated Report
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box>
              {/* Findings */}
              <Paper variant="outlined" sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>
                <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                  FINDINGS:
                </Typography>
                <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
                  {analysis.analyses.report.findings}
                </Typography>
              </Paper>

              {/* Impression */}
              <Paper variant="outlined" sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>
                <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                  IMPRESSION:
                </Typography>
                <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
                  {analysis.analyses.report.impression}
                </Typography>
              </Paper>

              {/* Recommendations */}
              {analysis.analyses.report.recommendations && (
                <Paper variant="outlined" sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>
                  <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                    RECOMMENDATIONS:
                  </Typography>
                  <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
                    {analysis.analyses.report.recommendations}
                  </Typography>
                </Paper>
              )}

              {/* Key Findings */}
              {analysis.analyses.report.keyFindings.length > 0 && (
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                    Key Findings:
                  </Typography>
                  <List dense>
                    {analysis.analyses.report.keyFindings.map((finding, idx) => (
                      <ListItem key={idx}>
                        <CheckIcon fontSize="small" color="success" sx={{ mr: 1 }} />
                        <ListItemText primary={finding} />
                      </ListItem>
                    ))}
                  </List>
                </Box>
              )}

              {/* Critical Findings */}
              {analysis.analyses.report.criticalFindings.length > 0 && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                    Critical Findings:
                  </Typography>
                  <List dense>
                    {analysis.analyses.report.criticalFindings.map((finding, idx) => (
                      <ListItem key={idx}>
                        <WarningIcon fontSize="small" sx={{ mr: 1 }} />
                        <ListItemText primary={finding} />
                      </ListItem>
                    ))}
                  </List>
                </Alert>
              )}

              {/* Actions */}
              <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>
                <Button
                  size="small"
                  startIcon={<CopyIcon />}
                  onClick={() => copyToClipboard(formatReportForExport(analysis.analyses.report))}
                >
                  Copy Report
                </Button>
                <Button
                  size="small"
                  startIcon={<DownloadIcon />}
                  onClick={() => {
                    const blob = new Blob([formatReportForExport(analysis.analyses.report!)], { type: 'text/plain' })
                    const url = URL.createObjectURL(blob)
                    const a = document.createElement('a')
                    a.href = url
                    a.download = `ai-report-${studyInstanceUID}.txt`
                    a.click()
                  }}
                >
                  Download
                </Button>
              </Box>

              <Divider sx={{ my: 2 }} />

              <Typography variant="caption" color="text.secondary">
                Model: {analysis.analyses.report.model} ‚Ä¢ 
                Generated: {new Date(analysis.analyses.report.generatedAt).toLocaleString()} ‚Ä¢ 
                Confidence: {(analysis.analyses.report.confidence * 100).toFixed(1)}%
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      )}

      {/* Clinical Reasoning (if available) */}
      {analysis.analyses.clinicalReasoning && (
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1" fontWeight="bold">
              üß† Clinical Reasoning
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box>
              {/* Differential Diagnosis */}
              <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                Differential Diagnosis:
              </Typography>
              <List dense>
                {analysis.analyses.clinicalReasoning.differentialDiagnosis.map((dx, idx) => (
                  <ListItem key={idx}>
                    <ListItemText primary={`${idx + 1}. ${dx}`} />
                  </ListItem>
                ))}
              </List>

              <Divider sx={{ my: 2 }} />

              {/* Treatment Recommendations */}
              <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                Treatment Recommendations:
              </Typography>
              <List dense>
                {analysis.analyses.clinicalReasoning.treatmentRecommendations.map((rec, idx) => (
                  <ListItem key={idx}>
                    <ListItemText primary={rec} />
                  </ListItem>
                ))}
              </List>

              <Typography variant="caption" color="text.secondary" sx={{ mt: 2, display: 'block' }}>
                Model: {analysis.analyses.clinicalReasoning.model}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      )}

      {/* Disclaimer Dialog */}
      <Dialog open={showDisclaimerDialog} onClose={() => setShowDisclaimerDialog(false)}>
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <WarningIcon color="warning" />
            AI Analysis Disclaimer
          </Box>
        </DialogTitle>
        <DialogContent>
          <Alert severity="warning" sx={{ mb: 2 }}>
            <Typography variant="body2" gutterBottom>
              <strong>Important Notice:</strong>
            </Typography>
            <Typography variant="body2" component="div">
              <ul style={{ margin: 0, paddingLeft: 20 }}>
                <li>AI-generated results are NOT FDA-approved for clinical diagnosis</li>
                <li>All results MUST be reviewed by a licensed radiologist</li>
                <li>AI analysis is for assistance only, not final diagnosis</li>
                <li>Clinical judgment should always take precedence</li>
              </ul>
            </Typography>
          </Alert>
          <Typography variant="body2">
            By proceeding, you acknowledge that you understand these limitations and will
            use AI results appropriately within your clinical workflow.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowDisclaimerDialog(false)}>
            Cancel
          </Button>
          <Button onClick={handleAcceptDisclaimer} variant="contained" color="primary">
            I Understand, Proceed
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default AIAnalysisPanel
