import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Grid,
  TextField,
  MenuItem,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Tabs,
  Tab,
  Alert,
  CircularProgress,
  Tooltip,
} from '@mui/material';
import {
  Add as AddIcon,
  CalendarToday,
  Warning,
  CheckCircle,
  Schedule,
  FilterList,
  Refresh,
  Edit,
  Delete,
  Notes,
} from '@mui/icons-material';
import ApiService from '../../services/ApiService';
import { useAuth } from '../../hooks/useAuth';

interface FollowUp {
  _id: string;
  patientId: {
    _id: string;
    firstName: string;
    lastName: string;
    mrn: string;
  };
  studyId?: {
    studyDate: string;
    modality: string;
    bodyPart: string;
  };
  type: string;
  priority: number;
  status: string;
  recommendedDate: string;
  scheduledDate?: string;
  completedDate?: string;
  reason: string;
  findings: string[];
  autoGenerated: boolean;
  aiConfidence?: number;
}

interface Statistics {
  total: number;
  pending: number;
  scheduled: number;
  completed: number;
  overdue: number;
  completionRate: string;
}

const FollowUpPage: React.FC = () => {
  const { user } = useAuth();
  const [followUps, setFollowUps] = useState<FollowUp[]>([]);
  const [statistics, setStatistics] = useState<Statistics | null>(null);
  const [loading, setLoading] = useState(true);
  const [tabValue, setTabValue] = useState(0);
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterType, setFilterType] = useState('all');
  const [selectedFollowUp, setSelectedFollowUp] = useState<FollowUp | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [noteDialogOpen, setNoteDialogOpen] = useState(false);
  const [noteText, setNoteText] = useState('');

  useEffect(() => {
    loadData();
  }, [tabValue, filterStatus, filterType]);

  const loadData = async () => {
    try {
      setLoading(true);
      
      let followUpsData;
      if (tabValue === 1) {
        // Overdue tab
        const response = await ApiService.getOverdueFollowUps();
        followUpsData = response.data;
      } else if (tabValue === 2) {
        // Upcoming tab
        const response = await ApiService.getUpcomingFollowUps(7);
        followUpsData = response.data;
      } else {
        // All tab
        const filters: any = {};
        if (filterStatus !== 'all') filters.status = filterStatus;
        if (filterType !== 'all') filters.type = filterType;
        const response = await ApiService.getFollowUps(filters);
        followUpsData = response.data;
      }

      const statsResponse = await ApiService.getFollowUpStatistics();
      
      setFollowUps(followUpsData);
      setStatistics(statsResponse.data);
    } catch (error) {
      console.error('Error loading follow-ups:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSchedule = async (followUp: FollowUp) => {
    setSelectedFollowUp(followUp);
    setDialogOpen(true);
  };

  const handleComplete = async (id: string) => {
    try {
      await ApiService.completeFollowUp(id);
      loadData();
    } catch (error) {
      console.error('Error completing follow-up:', error);
    }
  };

  const handleAddNote = (followUp: FollowUp) => {
    setSelectedFollowUp(followUp);
    setNoteDialogOpen(true);
  };

  const submitNote = async () => {
    if (!selectedFollowUp || !noteText.trim()) return;
    
    try {
      await ApiService.addFollowUpNote(selectedFollowUp._id, noteText);
      setNoteText('');
      setNoteDialogOpen(false);
      loadData();
    } catch (error) {
      console.error('Error adding note:', error);
    }
  };

  const getPriorityColor = (priority: number) => {
    if (priority >= 5) return 'error';
    if (priority >= 4) return 'warning';
    if (priority >= 3) return 'info';
    return 'default';
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'scheduled': return 'info';
      case 'overdue': return 'error';
      default: return 'default';
    }
  };

  const isOverdue = (followUp: FollowUp) => {
    return followUp.status !== 'completed' && 
           new Date(followUp.recommendedDate) < new Date();
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Box>
          <Typography variant="h4" fontWeight="bold" gutterBottom>
            Follow-up Management
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Track and manage patient follow-ups
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => {/* TODO: Add create dialog */}}
        >
          Create Follow-up
        </Button>
      </Box>

      {/* Statistics Cards */}
      {statistics && (
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={2.4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" variant="body2">Total</Typography>
                <Typography variant="h4">{statistics.total}</Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" variant="body2">Pending</Typography>
                <Typography variant="h4" color="warning.main">{statistics.pending}</Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" variant="body2">Scheduled</Typography>
                <Typography variant="h4" color="info.main">{statistics.scheduled}</Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" variant="body2">Overdue</Typography>
                <Typography variant="h4" color="error.main">{statistics.overdue}</Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" variant="body2">Completion Rate</Typography>
                <Typography variant="h4" color="success.main">{statistics.completionRate}%</Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* Tabs and Filters */}
      <Card sx={{ mb: 2 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)}>
            <Tab label="All Follow-ups" />
            <Tab label="Overdue" icon={<Warning fontSize="small" />} iconPosition="end" />
            <Tab label="Upcoming (7 days)" />
          </Tabs>
          <Box sx={{ display: 'flex', gap: 1, p: 1 }}>
            <TextField
              select
              size="small"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              sx={{ minWidth: 120 }}
              label="Status"
            >
              <MenuItem value="all">All Status</MenuItem>
              <MenuItem value="pending">Pending</MenuItem>
              <MenuItem value="scheduled">Scheduled</MenuItem>
              <MenuItem value="completed">Completed</MenuItem>
            </TextField>
            <TextField
              select
              size="small"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              sx={{ minWidth: 120 }}
              label="Type"
            >
              <MenuItem value="all">All Types</MenuItem>
              <MenuItem value="routine">Routine</MenuItem>
              <MenuItem value="urgent">Urgent</MenuItem>
              <MenuItem value="critical">Critical</MenuItem>
            </TextField>
            <IconButton onClick={loadData}>
              <Refresh />
            </IconButton>
          </Box>
        </Box>
      </Card>

      {/* Follow-ups List */}
      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
          <CircularProgress />
        </Box>
      ) : followUps.length === 0 ? (
        <Card>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <CalendarToday sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" color="text.secondary">
              No follow-ups found
            </Typography>
          </CardContent>
        </Card>
      ) : (
        <Grid container spacing={2}>
          {followUps.map((followUp) => (
            <Grid item xs={12} key={followUp._id}>
              <Card 
                sx={{ 
                  border: isOverdue(followUp) ? 2 : 1,
                  borderColor: isOverdue(followUp) ? 'error.main' : 'divider'
                }}
              >
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    {/* Patient Info */}
                    <Grid item xs={12} md={3}>
                      <Typography variant="h6">
                        {followUp.patientId.firstName} {followUp.patientId.lastName}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        MRN: {followUp.patientId.mrn}
                      </Typography>
                      {followUp.autoGenerated && (
                        <Chip 
                          label={`AI Generated (${(followUp.aiConfidence! * 100).toFixed(0)}%)`}
                          size="small"
                          color="primary"
                          sx={{ mt: 1 }}
                        />
                      )}
                    </Grid>

                    {/* Follow-up Details */}
                    <Grid item xs={12} md={4}>
                      <Typography variant="body2" color="text.secondary" gutterBottom>
                        Reason
                      </Typography>
                      <Typography variant="body1" gutterBottom>
                        {followUp.reason}
                      </Typography>
                      {followUp.studyId && (
                        <Typography variant="caption" color="text.secondary">
                          {followUp.studyId.modality} • {followUp.studyId.bodyPart}
                        </Typography>
                      )}
                    </Grid>

                    {/* Dates & Status */}
                    <Grid item xs={12} md={3}>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <CalendarToday fontSize="small" color="action" />
                          <Typography variant="body2">
                            {new Date(followUp.recommendedDate).toLocaleDateString()}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                          <Chip 
                            label={followUp.status}
                            size="small"
                            color={getStatusColor(followUp.status)}
                          />
                          <Chip 
                            label={followUp.type}
                            size="small"
                            color={getPriorityColor(followUp.priority)}
                          />
                          <Chip 
                            label={`Priority ${followUp.priority}`}
                            size="small"
                            variant="outlined"
                          />
                        </Box>
                      </Box>
                    </Grid>

                    {/* Actions */}
                    <Grid item xs={12} md={2}>
                      <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>
                        {followUp.status !== 'completed' && (
                          <>
                            <Tooltip title="Schedule">
                              <IconButton 
                                size="small"
                                onClick={() => handleSchedule(followUp)}
                              >
                                <Schedule />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="Mark Complete">
                              <IconButton 
                                size="small"
                                color="success"
                                onClick={() => handleComplete(followUp._id)}
                              >
                                <CheckCircle />
                              </IconButton>
                            </Tooltip>
                          </>
                        )}
                        <Tooltip title="Add Note">
                          <IconButton 
                            size="small"
                            onClick={() => handleAddNote(followUp)}
                          >
                            <Notes />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </Grid>
                  </Grid>

                  {/* Findings */}
                  {followUp.findings && followUp.findings.length > 0 && (
                    <Box sx={{ mt: 2, pt: 2, borderTop: 1, borderColor: 'divider' }}>
                      <Typography variant="body2" color="text.secondary" gutterBottom>
                        Key Findings:
                      </Typography>
                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        {followUp.findings.map((finding, idx) => (
                          <Chip 
                            key={idx}
                            label={finding}
                            size="small"
                            variant="outlined"
                          />
                        ))}
                      </Box>
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Schedule Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>
        <DialogTitle>Schedule Follow-up</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            type="date"
            label="Scheduled Date"
            InputLabelProps={{ shrink: true }}
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
          <Button variant="contained">Schedule</Button>
        </DialogActions>
      </Dialog>

      {/* Note Dialog */}
      <Dialog open={noteDialogOpen} onClose={() => setNoteDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Add Note</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            multiline
            rows={4}
            value={noteText}
            onChange={(e) => setNoteText(e.target.value)}
            placeholder="Enter your note..."
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setNoteDialogOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={submitNote}>Add Note</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default FollowUpPage;
